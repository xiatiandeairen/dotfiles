[http]
	postBuffer = 524288000
[filesystem "Oracle Corporation|1.8.0_131|/dev/disk1s1"]
	timestampResolution = 1001 milliseconds
	minRacyThreshold = 0 nanoseconds
[core]
	quotepath = false
	excludesfile = ~/.config/git/gitignore_global
	filemode = false
	editor = nvim
[commit]
	template = ~/.config/git/commit_template
[filesystem "Oracle Corporation|1.8.0_131|/dev/disk1s5"]
	timestampResolution = 1015 milliseconds
	minRacyThreshold = 0 nanoseconds
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[init]
	defaultBranch = main
[pull]
	rebase = true
[alias]
    hist = log --oneline --graph --decorate
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    ls = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    conflicts = diff --name-only --diff-filter=U
    local-branches = !git branch -vv | cut -c 3- | awk '$3 !~/\\[/ { print $1 }'
    recent-branches = !git branch --sort=-committerdate | head
    authors = !git log --format='%aN <%aE>' | grep -v 'users.noreply.github.com' | sort -u --ignore-case
	unstage = reset HEAD --
    last = log -1 HEAD
	alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
	recent = "!git for-each-ref --sort=-committerdate refs/heads/ --format='%(committerdate:short) %(refname:short)' | head -n 10"
	dev = !git checkout develop && git pull origin develop
	staging = !git checkout staging && git pull origin staging
	main = !git checkout main && git pull origin 
	master = !git checkout master && git pull origin 
	undo = checkout --
	fs = diff --name-status
	delete-branch = branch -d
	deleted = log --diff-filter=D --summary
	sync = "!f() { \\\n  branch=\"${2:-$(git rev-parse --abbrev-ref HEAD)}\"; \\\n  echo \"Syncing branch: $branch\"; \\\n  if git diff --quiet && git diff --cached --quiet; then \\\n    echo \"No local changes detected. Pulling, rebasing, and pushing...\"; \\\n    git pull origin \"$branch\" && \\\n    if [ $? -eq 0 ]; then \\\n      echo \"Successfully pulled from origin/$branch\"; \\\n    else \\\n      echo \"Error during git pull from origin/$branch\"; \\\n      return 1; \\\n    fi && \\\n    git rebase origin/\"$branch\" && \\\n    if [ $? -eq 0 ]; then \\\n      echo \"Successfully rebased on origin/$branch\"; \\\n    else \\\n      echo \"Error during git rebase origin/$branch\"; \\\n      return 1; \\\n    fi && \\\n    git push origin \"$branch\" && \\\n    if [ $? -eq 0 ]; then \\\n      echo \"Successfully pushed to origin/$branch\"; \\\n    else \\\n      echo \"Error during git push to origin/$branch\"; \\\n      return 1; \\\n    fi; \\\n  else \\\n    echo \"Local changes detected. Adding, committing, and syncing...\"; \\\n    git add . && \\\n    git commit -m \"$1\" && \\\n    if [ $? -eq 0 ]; then \\\n      echo \"Commit successful: $1\"; \\\n    else \\\n      echo \"Error during commit\"; \\\n      return 1; \\\n    fi && \\\n    git pull origin \"$branch\" && \\\n    if [ $? -eq 0 ]; then \\\n      echo \"Successfully pulled from origin/$branch\"; \\\n    else \\\n      echo \"Error during git pull from origin/$branch\"; \\\n      return 1; \\\n    fi && \\\n    git rebase origin/\"$branch\" && \\\n    if [ $? -eq 0 ]; then \\\n      echo \"Successfully rebased on origin/$branch\"; \\\n    else \\\n      echo \"Error during git rebase origin/$branch\"; \\\n      return 1; \\\n    fi && \\\n    git push origin \"$branch\" && \\\n    if [ $? -eq 0 ]; then \\\n      echo \"Successfully pushed to origin/$branch\"; \\\n    else \\\n      echo \"Error during git push to origin/$branch\"; \\\n      return 1; \\\n    fi; \\\n  fi; \\\n}; f"